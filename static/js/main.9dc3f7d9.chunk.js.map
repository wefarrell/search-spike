{"version":3,"sources":["constants/SelectOptions.js","logo.svg","components/Filter.js","components/TextFilter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","label","key","dataSource","__webpack_require__","p","Filter","state","selectedOption","options","handleChange","_this","setState","props","onChange","value","_this2","this","fetch","then","response","json","data","map","opt","react_default","a","createElement","react_select_esm","Component","TextFilter","searchKey","searchText","changeSelect","updateTextQuery","changeText","event","target","query","_","isEmpty","Object","defineProperty","Row","Col","md","type","className","ELASTIC_SEARCH_URL","toElasticsearchParams","elasticSearchString","concat","join","encodeURIComponent","App","textQuery","items","newQuery","fetchResults","fullQuery","objectSpread","queryString","url","r","objects","hits","console","log","updatedQuery","_this3","Container","components_TextFilter","SELECT_OPTIONS","field","components_Filter","updateQuery","item","i","asset_title","artist_name","composer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0EAkBAA,EAAOC,QAlBgB,CACrB,CACEC,MAAO,QACPC,IAAK,cACLC,WAAY,oBAEd,CACEF,MAAO,OACPC,IAAK,OACLC,WAAY,mBAEd,CACEF,MAAO,QACPC,IAAK,QACLC,WAAY,kGCdhBJ,EAAAC,QAAiBI,EAAAC,EAAuB,8MC+BzBC,6MA1BbC,MAAQ,CACNC,eAAgB,KAChBC,QAAS,MAGXC,aAAe,SAACF,GACdG,EAAKC,SAAS,CAAEJ,mBAChBG,EAAKE,MAAMC,SAASN,EAAeO,2FAGjB,IAAAC,EAAAC,KAClBC,MAAMD,KAAKJ,MAAMV,YAAYgB,KAAK,SAACC,GAAD,OAAcA,EAASC,SAAQF,KAAK,SAACG,GACrE,IAAIb,EAAUa,EAAKC,IAAI,SAACC,GACtB,MAAO,CAACvB,MAAOuB,EAAKT,MAAOS,KAE7BR,EAAKJ,SAAS,CAACH,+CAIV,IACCD,EAAmBS,KAAKV,MAAxBC,eACR,OAAOiB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQnB,QAASQ,KAAKV,MAAME,QAASM,MAAOP,EAAgBM,SAAUG,KAAKP,sBAtBjEmB,+ECCjBpB,EAAU,CACV,CAAEM,MAAO,cAAed,MAAO,UAC/B,CAAEc,MAAO,WAAYd,MAAO,UAC5B,CAAEc,MAAO,cAAed,MAAO,SAC/B,CAAEc,MAAO,cAAed,MAAO,UA2CpB6B,6MAvCbvB,MAAQ,CACNwB,UAAW,KACXC,WAAY,KACZvB,QAAS,MAGXwB,aAAe,SAACzB,GACdG,EAAKC,SAAS,CAACmB,UAAWvB,EAAeO,OAAQ,kBAAMJ,EAAKuB,uBAG9DC,WAAa,SAACC,GACZzB,EAAKC,SAAS,CAACoB,WAAYI,EAAMC,OAAOtB,OAAQ,kBAAMJ,EAAKuB,uBAG7DA,gBAAkB,WAChB,IAAII,EAAQ,GACRC,IAAEC,QAAQ7B,EAAKJ,MAAMyB,cACvBM,EAAKG,OAAAC,EAAA,EAAAD,CAAA,GAAK9B,EAAKJ,MAAMwB,UAAYpB,EAAKJ,MAAMyB,aAE9CrB,EAAKE,MAAMC,SAASwB,4EAIOrB,KAAKV,MAAxBC,eACR,OACEiB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKC,GAAI,GACLpB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQnB,QAASA,EAASK,SAAUG,KAAKgB,gBAE7CR,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKC,GAAI,GACLpB,EAAAC,EAAAC,cAAA,SAAOmB,KAAK,OAAOhC,SAAUG,KAAKkB,WAAYY,UAAU,oBA/B3ClB,aCHnBmB,EAAqB,wFAErBC,EAAwB,SAACX,GAC7B,IAAMY,EAAsBX,IAAED,GAAOf,IAAI,SAACR,EAAOb,GAAR,UAAAiD,OAAoBjD,EAApB,KAAAiD,OAA2BpC,KAASqC,KAAK,KAClF,OAAOC,mBAAmBH,IAiEbI,6MA7Db/C,MAAQ,CACN+B,MAAO,GACPiB,UAAW,GACXC,MAAO,MAGTtB,gBAAkB,SAACuB,GACjB9C,EAAKC,SAAS,CAAC2C,UAAWE,GAAW,kBAAM9C,EAAK+C,oBAUlDA,aAAe,WACb,IAAMC,EAASlB,OAAAmB,EAAA,EAAAnB,CAAA,GAAO9B,EAAKJ,MAAM+B,MAAU3B,EAAKJ,MAAMgD,WAChDM,EAAcZ,EAAsBU,GACpCG,EAAG,GAAAX,OAAMH,EAAN,eAAAG,OAAsCU,GAC/C3C,MAAM4C,GAAK3C,KAAM,SAAC4C,GAAD,OAAOA,EAAE1C,SAAQF,KAAM,SAAC6C,GACrC,IAAMR,EAAQjB,IAAEyB,EAAQC,KAAKA,MAAM1C,IAAI,WAAWR,QAClDmD,QAAQC,IAAIN,GACZlD,EAAKC,SAAS,CAAC4C,wFAdTtD,GAAI,IAAAc,EAAAC,KACd,OAAO,SAACF,GACN,IAAMqD,EAAY3B,OAAAmB,EAAA,EAAAnB,CAAA,GAAOzB,EAAKT,MAAM+B,MAAlBG,OAAAC,EAAA,EAAAD,CAAA,GAA8BvC,EAAMa,IACtDC,EAAKJ,SAAS,CAAC0B,MAAO8B,GAAe,kBAAMpD,EAAK0C,mDAe3C,IAAAW,EAAApD,KACP,OACEQ,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KACE7C,EAAAC,EAAAC,cAAC4C,EAAD,CAAYzD,SAAUG,KAAKiB,kBAC3BT,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKC,GAAI,GAEL2B,IAAejD,IAAI,SAACkD,GAAD,OACjBhD,EAAAC,EAAAC,cAAA,OAAKzB,IAAKuE,EAAMvE,KACduB,EAAAC,EAAAC,cAAA,aAAQ8C,EAAMxE,OACdwB,EAAAC,EAAAC,cAAC+C,EAAD,CAAQvE,WAAYsE,EAAMtE,WAAYW,SAAUuD,EAAKM,YAAYF,EAAMvE,WAM/EuB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKC,GAAI,GACP5B,KAAKV,MAAMiD,MAAMjC,IAAI,SAACqD,EAAMC,GAC1B,OAAOpD,EAAAC,EAAAC,cAAA,OAAKzB,IAAK2E,GACbpD,EAAAC,EAAAC,cAAA,mBAAWiD,EAAKE,aAChBrD,EAAAC,EAAAC,cAAA,oBAAYiD,EAAKG,aACjBtD,EAAAC,EAAAC,cAAA,oBAAYiD,EAAKI,UACjBvD,EAAAC,EAAAC,cAAA,wBAnDAE,aCJEoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1E,KAAK,SAAA2E,GACjCA,EAAaC","file":"static/js/main.9dc3f7d9.chunk.js","sourcesContent":["const SELECT_OPTIONS = [\n  {\n    label: 'Genre',\n    key: 'major_genre',\n    dataSource: 'data/genres.json'\n  },\n  {\n    label: 'Mood',\n    key: 'mood',\n    dataSource: 'data/moods.json'\n  },\n  {\n    label: 'Tempo',\n    key: 'tempo',\n    dataSource: 'data/tempos.json'\n  }\n];\n\nmodule.exports = SELECT_OPTIONS;","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport Select from 'react-select'\n\n\nclass Filter extends Component {\n  state = {\n    selectedOption: null,\n    options: []\n  };\n\n  handleChange = (selectedOption) => {\n    this.setState({ selectedOption });\n    this.props.onChange(selectedOption.value)\n  };\n\n  componentDidMount() {\n    fetch(this.props.dataSource).then((response) => response.json()).then((data) => {\n      let options = data.map((opt) => {\n        return {label: opt, value: opt}\n      });\n      this.setState({options});\n    })\n  };\n\n  render() {\n    const { selectedOption } = this.state;\n    return <Select options={this.state.options} value={selectedOption} onChange={this.handleChange}/>\n  }\n}\n\n\nexport default Filter;\n","import React, { Component } from 'react'\nimport Select from 'react-select'\nimport { Row, Col} from 'react-bootstrap'\nimport _ from 'lodash'\n\nlet options = [\n    { value: 'artist_name', label: 'Artist' },\n    { value: 'composer', label: 'Writer' },\n    { value: 'asset_title', label: 'Title' },\n    { value: 'album_title', label: 'Album' }\n];\n\nclass TextFilter extends Component {\n  state = {\n    searchKey: null,\n    searchText: null,\n    options: []\n  };\n\n  changeSelect = (selectedOption) => {\n    this.setState({searchKey: selectedOption.value}, () => this.updateTextQuery());\n  };\n\n  changeText = (event) => {\n    this.setState({searchText: event.target.value}, () => this.updateTextQuery() );\n  };\n\n  updateTextQuery = () => {\n    let query = {};\n    if(!_.isEmpty(this.state.searchText)){\n      query = {[this.state.searchKey]: this.state.searchText}\n    }\n    this.props.onChange(query)\n  }\n\n  render() {\n    const { selectedOption } = this.state;\n    return (\n      <Row>\n        <Col md={4}>\n            <Select options={options} onChange={this.changeSelect}></Select>\n        </Col>\n        <Col md={8}>\n            <input type=\"text\" onChange={this.changeText} className=\"search\"/>\n        </Col>\n      </Row>\n    )\n\n  }\n}\n\n\nexport default TextFilter;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport Filter from './components/Filter'\nimport './App.css';\nimport SELECT_OPTIONS from './constants/SelectOptions'\nimport { Row, Container, Col} from 'react-bootstrap'\nimport Select from 'react-select'\nimport _ from 'lodash'\nimport TextFilter from './components/TextFilter'\nconst ELASTIC_SEARCH_URL = 'https://vpc-testingsearchspike-5oxspwmfocvhaaweigely4aq6y.us-east-1.es.amazonaws.com/'\n\nconst toElasticsearchParams = (query) =>{\n  const elasticSearchString = _(query).map((value, key) => `+${key}:${value}`).join(' ');\n  return encodeURIComponent(elasticSearchString)\n}\n\nclass App extends Component {\n  state = {\n    query: {},\n    textQuery: {},\n    items: []\n  };\n\n  updateTextQuery = (newQuery) => {\n    this.setState({textQuery: newQuery}, () => this.fetchResults());\n  };\n\n  updateQuery(key){\n    return (value) => {\n      const updatedQuery = {...this.state.query, ...{[key]: value}};\n      this.setState({query: updatedQuery}, () => this.fetchResults());\n    }\n  }\n\n  fetchResults = () => {\n    const fullQuery = {...this.state.query, ...this.state.textQuery}\n    const queryString = toElasticsearchParams(fullQuery);\n    const url = `${ELASTIC_SEARCH_URL}/_search?q=${queryString}`\n    fetch(url).then( (r) => r.json()).then( (objects) => {\n        const items = _(objects.hits.hits).map('_source').value();\n        console.log(queryString)\n        this.setState({items})\n    } );\n  };\n\n  render() {\n    return (\n      <Container>\n        <TextFilter onChange={this.updateTextQuery}></TextFilter>\n        <Row>\n          <Col md={4}>\n            {\n              SELECT_OPTIONS.map((field) => (\n                <div key={field.key}>\n                  <label>{field.label}</label>\n                  <Filter dataSource={field.dataSource} onChange={this.updateQuery(field.key)}></Filter>\n                </div>\n                )\n              )\n            }\n          </Col>\n          <Col md={8}>{\n            this.state.items.map((item, i) => {\n              return <div key={i}>\n                  <p>Title: {item.asset_title}</p>\n                  <p>Artist: {item.artist_name}</p>\n                  <p>Writer: {item.composer}</p>\n                  <hr></hr>\n              </div>\n            })\n          }</Col>\n        </Row>\n\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}