{"version":3,"sources":["constants/SelectOptions.js","logo.svg","components/Filter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","label","key","dataSource","__webpack_require__","p","options","value","Filter","state","selectedOption","handleChange","_this","setState","_this2","this","fetch","props","then","response","json","data","map","opt","react_default","a","createElement","react_select_esm","onChange","Component","console","log","SELECT_OPTIONS","App","Container","Row","Col","md","type","className","field","components_Filter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0EAkBAA,EAAOC,QAlBgB,CACrB,CACEC,MAAO,QACPC,IAAK,QACLC,WAAY,oBAEd,CACEF,MAAO,OACPC,IAAK,OACLC,WAAY,mBAEd,CACEF,MAAO,QACPC,IAAK,QACLC,WAAY,kGCdhBJ,EAAAC,QAAiBI,EAAAC,EAAuB,iMCGpCC,EAAU,CACZ,CAAEC,MAAO,YAAaN,MAAO,aAC7B,CAAEM,MAAO,aAAcN,MAAO,cAC9B,CAAEM,MAAO,UAAWN,MAAO,YA4BdO,6MAxBbC,MAAQ,CACNC,eAAgB,QAGlBC,aAAe,SAACD,GACdE,EAAKC,SAAS,CAAEH,uGAGE,IAAAI,EAAAC,KAClBC,MAAMD,KAAKE,MAAMd,YAAYe,KAAK,SAACC,GAAD,OAAcA,EAASC,SAAQF,KAAK,SAACG,GACrEf,EAAUe,EAAKC,IAAI,SAACC,GAClB,MAAO,CAACtB,MAAOsB,EAAKhB,MAAOgB,KAE7BT,EAAKD,SAAS,CAACP,+CAIV,IACCI,EAAmBK,KAAKN,MAAxBC,eACR,OAAOc,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQrB,QAASA,EAASC,MAAOG,EAAgBkB,SAAUb,KAAKJ,sBApBtDkB,8DCDrBC,QAAQC,IAAIC,KACZ,IAAI1B,EAAU,CACZ,CAAEC,MAAO,SAAUN,MAAO,UAC1B,CAAEM,MAAO,SAAUN,MAAO,UAC1B,CAAEM,MAAO,QAASN,MAAO,SACzB,CAAEM,MAAO,QAASN,MAAO,UAuCZgC,6MAnCbxB,MAAQ,CACNC,eAAgB,8EAIhB,OACEc,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACEX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAKC,GAAI,GACPb,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQrB,QAASA,KAEnBkB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAKC,GAAI,GACPb,EAAAC,EAAAC,cAAA,SAAOY,KAAK,OAAOC,UAAU,aAGjCf,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACEX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAKC,GAAI,GAELL,IAAeV,IAAI,SAACkB,GAAD,OACjBhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,aAAQc,EAAMvC,OACduB,EAAAC,EAAAC,cAACe,EAAD,CAAQtC,WAAYqC,EAAMrC,WAAYD,IAAKsC,EAAMtC,UAMzDsB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAKC,GAAI,GAAT,oBA5BQR,aCJEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.a04158f2.chunk.js","sourcesContent":["const SELECT_OPTIONS = [\n  {\n    label: 'Genre',\n    key: 'genre',\n    dataSource: 'data/genres.json'\n  },\n  {\n    label: 'Mood',\n    key: 'mood',\n    dataSource: 'data/moods.json'\n  },\n  {\n    label: 'Tempo',\n    key: 'tempo',\n    dataSource: 'data/tempos.json'\n  }\n];\n\nmodule.exports = SELECT_OPTIONS;","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport Select from 'react-select'\n\nlet options = [\n  { value: 'chocolate', label: 'Chocolate' },\n  { value: 'strawberry', label: 'Strawberry' },\n  { value: 'vanilla', label: 'Vanilla' }\n];\n\nclass Filter extends Component {\n  state = {\n    selectedOption: null,\n  };\n\n  handleChange = (selectedOption) => {\n    this.setState({ selectedOption });\n  };\n\n  componentDidMount() {\n    fetch(this.props.dataSource).then((response) => response.json()).then((data) => {\n      options = data.map((opt) => {\n        return {label: opt, value: opt}\n      })\n      this.setState({options});\n    })\n  };\n\n  render() {\n    const { selectedOption } = this.state;\n    return <Select options={options} value={selectedOption} onChange={this.handleChange}/>\n  }\n}\n\n\nexport default Filter;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport Filter from './components/Filter'\nimport './App.css';\nimport SELECT_OPTIONS from './constants/SelectOptions'\nimport { Row, Container, Col} from 'react-bootstrap'\nimport Select from 'react-select'\n\nconsole.log(SELECT_OPTIONS)\nlet options = [\n  { value: 'artist', label: 'Artist' },\n  { value: 'writer', label: 'Writer' },\n  { value: 'title', label: 'Title' },\n  { value: 'album', label: 'Album' }\n];\n\nclass App extends Component {\n  state = {\n    selectedOption: null,\n  };\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col md={4}>\n            <Select options={options}></Select>\n          </Col>\n          <Col md={8}>\n            <input type=\"text\" className=\"search\"/>\n          </Col>\n        </Row>\n        <Row>\n          <Col md={4}>\n            {\n              SELECT_OPTIONS.map((field) => (\n                <div>\n                  <label>{field.label}</label>\n                  <Filter dataSource={field.dataSource} key={field.key}></Filter>\n                </div>\n                )\n              )\n            }\n          </Col>\n          <Col md={8}>Content</Col>\n        </Row>\n\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}